# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = "bento/ubuntu-16.04"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.56.69"

  # Create a private network, which allows host-only access to the machine
  # using a DHCP IP.
  # config.vm.network "private_network", type: "dhcp"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"
  config.vm.synced_folder "~/ansible", "/home/vagrant/ansible"
  config.vm.synced_folder "~/python", "/home/vagrant/python"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.


  # Configure adapter #2 in virtualbox to connect to "vboxnet0" and use DHCP
  config.vm.provider "virtualbox" do |vb|
    # This will create the private network if it does not exist and use
    # DHCP for adapter #2.  WARNING, this may modify the dhcp server parameters
    # OR throw a 'conflict' error if these setting overlap with an existing
    # host-only-network.  If you are going to use DHCP, its best to create
    # vboxnet0 in the GUI or command-line before provisioning with this
    # line:
    config.vm.network "private_network",  :type => 'dhcp', :adapter => 2,
                      :ip => '192.168.56.1',
                      :dhcp_ip => '192.168.56.100',
                      :dhcp_lower => '192.168.56.101',
                      :dhcp_upper => '192.168.56.199'

    # This places adapter #2 on vboxnet0, but does not configure the interface
    # in /etc/network/interface...that is done above with the "private_network"
    # settings.
    vb.customize ["modifyvm", :id, "--nic2", "hostonly",
                  "--hostonlyadapter2", "vboxnet0"]
  end


  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
  config.vm.provision "shell", inline: <<-SHELL
    # http://docs.ansible.com/ansible/intro_installation.html#latest-releases-via-apt-ubuntu 
    apt-get install -y software-properties-common
    apt-add-repository -y ppa:ansible/ansible
    apt-get update
    apt-get install -y ansible

    # http://docs.ansible.com/ansible/intro_installation.html#latest-releases-via-pip
    #   This seems to require a working Ansible is already installed, so this is why
    #   Anisble is installed from Apt 1st.
    easy_install pip
    pip install git+git://github.com/ansible/ansible.git@devel 

    # https://en.wikipedia.org/wiki/Wajig
    #   Use:  'wajig daily-upgrade'
    apt-get install -y wajig

    # http://docs.python-requests.org/en/master/
    pip install requests

    # https://pypi.python.org/pypi/colorama
    pip install colorama
  SHELL
end
